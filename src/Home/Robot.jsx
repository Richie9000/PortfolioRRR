/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import * as THREE from 'three';

export function Robot(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/robot.glb')
  const { actions } = useAnimations(animations, group)

  useEffect(() => {
    if (actions) {
      const animationName = Object.keys(actions)[0]; // Get the first animation
      const action = actions[animationName];
      
      if (action) {
        action.setLoop(THREE.LoopRepeat, 2); // Set the animation to repeat twice
        action.clampWhenFinished = true; // Keep the last frame when finished

        // Play the animation and after it's done, reset it to the start
        action.play();

        // A timeout to manually reset the animation after it has played twice
        const duration = action.getClip().duration * 2 * 1000; // Duration in milliseconds
        const resetTimeout = setTimeout(() => {
          action.stop();
          action.reset(); // Reset the animation to the starting frame
        }, duration);

        // Cleanup timeout
        return () => clearTimeout(resetTimeout);
      }
    }
  }, [actions]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="rig" scale={0.561}>
          <skinnedMesh
            name="Head"
            geometry={nodes.Head.geometry}
            material={materials.Material}
            skeleton={nodes.Head.skeleton}
          />
          <primitive object={nodes['ORG-spine']} />
          <primitive object={nodes.neutral_bone} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/robot.glb')
